[tox]
description = Default tox environments list
envlist =
    style,{py3.7,py3.8,py3.9,py3.10}{,-coverage},doc-{windows,linux}
skip_missing_interpreters = false
isolated_build = true

[gh-actions]
description = The tox environment to be executed in gh-actions for a given python version
python =
    3.7: py3.7-coverage
    3.8: py3.8-coverage
    3.9: py3.9-coverage
    3.10: py3.10-coverage

[testenv]
description = Checks for project unit tests and coverage (if desired)
basepython =
    py3.7: python3.7
    py3.8: python3.8
    py3.9: python3.9
    py3.10: python3.10
    py: python3{style,reformat,doc}: python3
skip_install = true
allowlist_externals  =
    poetry
setenv =
    PYTHONUNBUFFERED = yes
    coverage: PYTEST_EXTRA_ARGS = --cov=ansys.dpf --cov-report=term --cov-report=xml --cov-report=html
commands =
    poetry install -E test
    poetry run pytest {env:PYTEST_MARKERS:} {env:PYTEST_EXTRA_ARGS:} {posargs:-vv}

[testenv:test-minimal]
description = Checks for project unit tests with minimal package versions
basepython =
   python3.7
skip_install = true
allowlist_externals  =
    poetry
setenv =
    PYTHONUNBUFFERED = yes
commands =
    poetry install -E test
    poetry run python -m pip install -r minimum_requirements.txt
    poetry run pytest {env:PYTEST_MARKERS:} {posargs:-vv}

[testenv:style]
description = Checks project code style
skip_install = true
basepython =
 python3.9
allowlist_externals  =
    poetry
commands =
    poetry install -E pre-commit
    pre-commit install
    pre-commit run --all-files --show-diff-on-failure


[testenv:doc-windows]
description = Check if documentation generates properly
setenv = REPO_ROOT = {toxinidir}
         # The example are created with the docker container
         # that listens to port 21002. The container needs
         # to be started manually.
         PYDPF_COMPOSITES_DOCKER_CONTAINER_PORT = 21002
basepython =
 python3.9
allowlist_externals  =
    poetry
commands =poetry install -E docs
    poetry run sphinx-build -d "{toxworkdir}/doc_doctree" doc/source "{toxworkdir}/doc_out" --color -n -vW --keep-going -bhtml

[testenv:doc-linux]
description = Check if documentation generates properly
setenv = REPO_ROOT = {toxinidir}
basepython =
 python3.9
passenv =  PYDPF_COMPOSITES_DOCKER_CONTAINER_PORT
allowlist_externals  =
    poetry, xvfb-run
commands =poetry install -E docs
    xvfb-run poetry run sphinx-build -d "{toxworkdir}/doc_doctree" doc/source "{toxworkdir}/doc_out" --color -n -vW --keep-going -bhtml

[testenv:doc-windows-pdf]
description = Check if documentation generates properly
setenv = REPO_ROOT = {toxinidir}
         # The example are created with the docker container
         # that listens to port 21002. The container needs
         # to be started manually.
         PYDPF_COMPOSITES_DOCKER_CONTAINER_PORT = 21002
basepython =
 python3.9
allowlist_externals  =
    poetry
commands =poetry install -E docs
    poetry run sphinx-build  -M latex -d "{toxworkdir}/doc_doctree" doc/source "{toxworkdir}/doc_out" --color
    cd "{toxworkdir}/doc_out/latex"
    for %%f in (*.tex) do (
    pdflatex "%%f" --interaction=nonstopmode)

[testenv:doc-linux-pdf]
description = Check if documentation generates properly
setenv = REPO_ROOT = {toxinidir}
basepython =
 python3.9
passenv =  PYDPF_COMPOSITES_DOCKER_CONTAINER_PORT
allowlist_externals  =
    poetry, xvfb-run
commands =poetry install -E docs
    xvfb-run poetry run sphinx-build -M latex -d "{toxworkdir}/doc_doctree" doc/source "{toxworkdir}/doc_out" --color
    cd "{toxworkdir}/doc_out/latex"
    latexmk -r latexmkrc -pdf *.tex -interaction=nonstopmode || true
    (test -f "{toxworkdir}/doc_out/latex/*.pdf" && echo pdf exists) || exit 1
