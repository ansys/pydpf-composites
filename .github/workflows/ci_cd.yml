name: GitHub CI
on:
  schedule:
    - cron: '0 0 * * *'
  pull_request:
  push:
    tags:
      - "*"
    branches:
      - main
  workflow_dispatch:
    inputs:

env:
  MAIN_PYTHON_VERSION: '3.9'
  ANSYS_VERSION: '231'
  PACKAGE_NAME: 'ansys-dpf-composites'
  DOCUMENTATION_CNAME: 'composites.dpf.docs.pyansys.com'
  PYDPF_COMPOSITES_DOCKER_CONTAINER_PORT: "21002"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  code-style:
    name: "Code style"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip tox
          python -m pip install --upgrade poetry

      - name: Test with tox
        run: tox -e style

  doc-style:
    name: "Documentation style"
    runs-on: ubuntu-latest
    steps:
      - uses: pyansys/actions/doc-style@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  tests:
    name: "Tests and coverage"
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # We can't test on windows because it is not possible to run linux
        # docker images on the windows agents. See the issue
        # https://github.com/actions/runner-images/issues/1143
        os: [ubuntu-latest]
        python-version: ['3.7', '3.8', '3.9', '3.10']
      fail-fast: false
    steps:
      - name: "Login in Github Container registry"
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: "Pull and start dpf container"
        run:  |
          docker pull ghcr.io/pyansys/pydpf-composites:${{ env.ANSYS_VERSION }}

      - name: "Checkout the project"
        uses: actions/checkout@v3

      - name: "Set up Python ${{ matrix.python-version }}"
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: "Install Python dependencies"
        run: |
          python -m pip install --upgrade pip tox tox-gh-actions
          python -m pip install --upgrade poetry

      - name: "Test with tox"
        # Only the tox environment specified in the tox.ini gh-actions is run
        run: |
          tox

      - name: "Upload server output"
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: server_output
          path: tests/logs/*_log_*.txt
          retention-days: 7

  tests_minimal_version:
    name: "Test with lower-bound dependency versions"
    runs-on: ubuntu-latest

    steps:
      - name: "Login in Github Container registry"
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: "Pull and start DPF container"
        run: |
          docker pull ghcr.io/pyansys/pydpf-composites:${{ env.ANSYS_VERSION }}
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.7
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip tox tox-gh-actions
          python -m pip install --upgrade poetry

      - name: Test with tox
        run: tox -e test-minimal

  doc-build:
    name: "Documentation build"
    runs-on: ubuntu-latest
    steps:
      - name: "Install OS packages"
        run: |
          sudo apt update
          sudo apt-get install pandoc xvfb

      - name: "Login in Github Container registry"
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: pyansys-ci-bot
          password: ${{ secrets.PYANSYS_CI_BOT_PACKAGE_TOKEN }}

      - name: "Pull and start dpf container"
        run: |
          docker pull ghcr.io/pyansys/pydpf-composites:${{ env.ANSYS_VERSION }}
          docker run -d --restart always -p 21002:50052 ghcr.io/pyansys/pydpf-composites:${{ env.ANSYS_VERSION }}

      - name: "Checkout the project"
        uses: actions/checkout@v3

      - name: "Set up Python ${{ env.MAIN_PYTHON_VERSION }}"
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

      - name: "Install Python dependencies"
        run: |
          python -m pip install --upgrade pip tox
          python -m pip install --upgrade poetry

      - name: "Generate the documentation with tox"
        run: |
          tox -e doc-linux

      - name: "Upload HTML Documentation"
        uses: actions/upload-artifact@v2
        with:
          name: documentation-html
          path: .tox/doc_out/html
          retention-days: 7

      - name: "Install OS packages for PDF"
        run: |
          sudo apt-get install latexmk texlive-latex-extra

      - name: "Generate the PDF documentation with tox"
        run: |
          tox -e doc-linux-pdf

      - name: "Upload PDF Documentation"
        uses: actions/upload-artifact@v2
        with:
          name: documentation-pdf
          path: .tox/doc_out/latex/ansys-dpf-composites.pdf
          retention-days: 7

  build-package:
    name: "Build package"
    runs-on: ubuntu-latest
    needs: [doc-style, doc-build, code-style, tests, tests_minimal_version]
    steps:
      - name: "Build library source and wheel artifacts"
        uses: pyansys/actions/build-library@v3
        with:
          library-name: ${{ env.PACKAGE_NAME }}

  doc-deploy-dev:
    name: "Deploy development documentation"
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [build-package]
    steps:
      - uses: pyansys/actions/doc-deploy-dev@v3
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.GITHUB_TOKEN }}

  release:
    name: "Release project"
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/v')
    needs: [build-package]
    runs-on: ubuntu-latest
    steps:

      - name: "Release to the private PyPI repository"
        uses: pyansys/actions/release-pypi-private@v3
        with:
          library-name: ${{ env.PACKAGE_NAME }}
          twine-username: "__token__"
          twine-token: ${{ secrets.PYANSYS_PYPI_PRIVATE_PAT }}

      - name: "Release to the public PyPI repository"
        uses: pyansys/actions/release-pypi-public@v3
        with:
          library-name: ${{ env.PACKAGE_NAME }}
          twine-username: "__token__"
          twine-token: ${{ secrets.PYPI_TOKEN }}

      - name: "Release to GitHub"
        uses: pyansys/actions/release-github@v3
        with:
          library-name: ${{ env.PACKAGE_NAME }}

  doc-deploy-stable:
    name: "Deploy stable documentation"
    runs-on: ubuntu-latest
    needs: [release]
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/v')
    steps:
      - uses: pyansys/actions/doc-deploy-stable@v3
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.GITHUB_TOKEN }}
