name: GitHub CI
on:
  schedule:
    - cron: '0 0 * * *'
  pull_request:
  push:
    tags:
      - "*"
    branches:
      - main

env:
  MAIN_PYTHON_VERSION: '3.9'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  style:
    name: Code style
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip tox
          python -m pip install --upgrade poetry

      - name: Test with tox
        run: tox -e style


  tests:
    name: Tests and coverage
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # We can't test on windows because
        # it is not possible to run
        # linux docker images on the windows agents
        # https://github.com/actions/runner-images/issues/1143
        os: [ubuntu-latest]
        python-version: ['3.7', '3.8', '3.9', '3.10']
      fail-fast: false

    steps:
      - name: Install OS packages
        run: |
          sudo apt update
          sudo apt-get install pandoc xvfb
      - name: Login in Github Container registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: pull and start dpf container
        run:  |
          docker pull ghcr.io/pyansys/pydpf-composites:231
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip tox tox-gh-actions
          # Use dev version of poetry because the stable version fails to resolve all dependencies
          python -m pip install --upgrade poetry

      - name: Test with tox
        # Only the tox environment specified in the tox.ini gh-actions is run
        run: tox
      - name: Upload server output
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: server_output
          path: tests/logs/*_log_*.txt
          retention-days: 7


  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Install OS packages
        run: |
          sudo apt update
          sudo apt-get install pandoc xvfb
      - name: Login in Github Container registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: pyansys-ci-bot
          password: ${{ secrets.PYANSYS_CI_BOT_PACKAGE_TOKEN }}
      - name: pull and start dpf container
        run: |
          docker pull ghcr.io/pyansys/pydpf-composites:231
          docker run -d --restart always -p 21002:50052 ghcr.io/pyansys/pydpf-composites:231
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip tox
          # Use dev version of poetry because the stable version fails to resolve all dependencies
          python -m pip install --upgrade poetry
      - name: Generate the documentation with tox
        run: | 
          tox -e doc-linux
          touch .tox/doc_out/.nojekyll
          echo "dev.composites.dpf.docs.pyansys.com" >> .tox/doc_out/CNAME

      - name: Upload HTML Documentation
        uses: actions/upload-artifact@v2
        with:
          name: Documentation-html
          path: .tox/doc_out/
          retention-days: 7


      - name: Deploy Documentation
        if: github.ref == 'refs/heads/main'
        uses: JamesIves/github-pages-deploy-action@4.1.4
        with:
          branch: gh-pages
          folder: .tox/doc_out/
          clean: true

  build:
    name: Build library
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
      - name: Install dependencies and build the library
        run: |
          # Use dev version of poetry because the stable version fails to resolve all dependencies
          python -m pip install --upgrade pip poetry
          poetry install -E build
          poetry build
          poetry run python -m twine check dist/*
