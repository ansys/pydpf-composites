
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/gallery_examples/011_rst_workflow.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_gallery_examples_011_rst_workflow.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_gallery_examples_011_rst_workflow.py:


.. _rst_workflow_example:

Failure analysis of an MAPDL (RST) model
----------------------------------------

This example shows the postprocessing of an MAPDL (RST) model with layered elements that was not
preprocessed by ACP. The difference between the RST-only and ACP-based workflow is that
the section data are loaded from the RST file instead of the ACP layup file.
This happens automatically if the parameter `composite` of the
:class:`.ContinuousFiberCompositesFiles` class is not set.

The engineering data file (XML or ENGD) with the material properties is needed anyway.
Otherwise, the material properties cannot be mapped.
At the end of this example, two workflows are shown on how to create
the engineering data file based on a MAPDL model and how to set the
material UUIDs in MAPDL.

.. important::
   The material UUIDs in the engineering data file must be identical
   to the UUIDs in Mechanical APDL (RST file).

The postprocessing of MAPDL models is supported in 2024 R2 (DPF Server version 8.0)
and later. A few advanced features are not supported with the RST only workflow.
For more information, see :ref:`limitations`.

.. GENERATED FROM PYTHON SOURCE LINES 28-34

Set up analysis
~~~~~~~~~~~~~~~
Setting up the analysis consists of loading Ansys libraries, connecting to the
DPF server, and retrieving the example files.

Load Ansys libraries.

.. GENERATED FROM PYTHON SOURCE LINES 34-48

.. code-block:: default


    from ansys.dpf.composites.composite_model import CompositeModel
    from ansys.dpf.composites.constants import FailureOutput
    from ansys.dpf.composites.example_helper import get_continuous_fiber_example_files
    from ansys.dpf.composites.failure_criteria import (
        CombinedFailureCriterion,
        CoreFailureCriterion,
        FaceSheetWrinklingCriterion,
        MaxStrainCriterion,
        MaxStressCriterion,
        VonMisesCriterion,
    )
    from ansys.dpf.composites.server_helpers import connect_to_or_start_server








.. GENERATED FROM PYTHON SOURCE LINES 49-50

Start a DPF server and copy the example files into the current working directory.

.. GENERATED FROM PYTHON SOURCE LINES 50-52

.. code-block:: default

    server = connect_to_or_start_server()








.. GENERATED FROM PYTHON SOURCE LINES 53-54

Get input files (RST and material.engd but skip the ACP layup file).

.. GENERATED FROM PYTHON SOURCE LINES 54-57

.. code-block:: default

    composite_files_on_server = get_continuous_fiber_example_files(server, "shell", True)
    print(composite_files_on_server)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ContinuousFiberCompositesFiles(rst=['/tmp/dataProcessingTemp140591211759360/shell.rst'], composite={}, engineering_data='/tmp/dataProcessingTemp140591211759360/material.engd', files_are_local=False)




.. GENERATED FROM PYTHON SOURCE LINES 58-61

Configure combined failure criterion
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Configure the combined failure criterion.

.. GENERATED FROM PYTHON SOURCE LINES 61-73

.. code-block:: default


    combined_fc = CombinedFailureCriterion(
        name="failure of all materials",
        failure_criteria=[
            MaxStrainCriterion(),
            MaxStressCriterion(),
            CoreFailureCriterion(),
            VonMisesCriterion(vme=True, vms=False),
            FaceSheetWrinklingCriterion(),
        ],
    )








.. GENERATED FROM PYTHON SOURCE LINES 74-77

Set up model and evaluate failures
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Set up the composite model.

.. GENERATED FROM PYTHON SOURCE LINES 77-80

.. code-block:: default


    composite_model = CompositeModel(composite_files_on_server, server)








.. GENERATED FROM PYTHON SOURCE LINES 81-82

Evaluate failures for the entire model

.. GENERATED FROM PYTHON SOURCE LINES 82-88

.. code-block:: default

    output_all_elements = composite_model.evaluate_failure_criteria(
        combined_criterion=combined_fc,
    )
    irf_field = output_all_elements.get_field({"failure_label": FailureOutput.FAILURE_VALUE})
    irf_field.plot()




.. offlineviewer:: examples/gallery_examples/images/sphx_glr_011_rst_workflow_001.vtksz






.. GENERATED FROM PYTHON SOURCE LINES 89-91

Create and plot a sampling point
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 91-96

.. code-block:: default

    sampling_point = composite_model.get_sampling_point(combined_criterion=combined_fc, element_id=2)
    sampling_plot = sampling_point.get_result_plots(core_scale_factor=0.1)
    sampling_plot.figure.show()





.. image-sg:: /examples/gallery_examples/images/sphx_glr_011_rst_workflow_002.png
   :alt: Strains, Stresses, Failures
   :srcset: /examples/gallery_examples/images/sphx_glr_011_rst_workflow_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 97-115

Create Engineering Data file and set material UUIDs in MAPDL
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Here are two workflows for setting up the engineering data file
and the material UUIDs in MAPDL. The material UUIDs must be set
in MAPDL before the model is solved.

With WB and Engineering Data:
  - Create an External Model system in WB and load the solver input file
  - Link the External Model with an Engineering Data system and update it
  - Save the project and copy the generated engineering data file (EngineeringData.xml)
  - For each material, look for the ``DataTransferID``, go to MAPDL and set the material
    UUIDs with the ``MP,UVID,<material index>,<value>`` command

With ACP Standalone (for constant material properties only):
  - Start ACP, go to *File - Import Model* and load the solver input file (CDB)
  - Go to the Materials folder and export the engineering data file (Ansys Workbench XML)
  - For each material, look for the ``DataTransferID``, go to MAPDL and set the material
    UUID with the ``MP,UVID,<material index>,<value>`` command.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  7.443 seconds)


.. _sphx_glr_download_examples_gallery_examples_011_rst_workflow.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 011_rst_workflow.py <011_rst_workflow.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 011_rst_workflow.ipynb <011_rst_workflow.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
