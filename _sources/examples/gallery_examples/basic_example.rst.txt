
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/gallery_examples/basic_example.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_gallery_examples_basic_example.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_gallery_examples_basic_example.py:


.. _basic_example:

Basic example of setting up a composite failure workflow
----------------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 8-14

.. code-block:: default



    import json
    import os
    import pathlib








.. GENERATED FROM PYTHON SOURCE LINES 15-16

Load ansys libraries

.. GENERATED FROM PYTHON SOURCE LINES 16-20

.. code-block:: default

    import ansys.dpf.core as dpf

    from ansys.dpf.composites.failure_config import get_failure_criteria_definition








.. GENERATED FROM PYTHON SOURCE LINES 21-22

Load dpf plugin

.. GENERATED FROM PYTHON SOURCE LINES 22-26

.. code-block:: default

    server = dpf.server.connect_to_server("127.0.0.1", port=21002)
    dpf.load_library("libcomposite_operators.so", "composites")
    dpf.load_library("libAns.Dpf.EngineeringData.so", "engineeringdata")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    'engineeringdata successfully loaded'



.. GENERATED FROM PYTHON SOURCE LINES 27-28

Specify input files and upload them to the server

.. GENERATED FROM PYTHON SOURCE LINES 28-38

.. code-block:: default


    # Todo make files available for users
    TEST_DATA_ROOT_DIR = pathlib.Path(os.environ["REPO_ROOT"]) / "tests" / "data"
    rst_path = os.path.join(TEST_DATA_ROOT_DIR, "shell.rst")
    h5_path = os.path.join(TEST_DATA_ROOT_DIR, "ACPCompositeDefinitions.h5")
    material_path = os.path.join(TEST_DATA_ROOT_DIR, "material.engd")
    rst_server_path = dpf.upload_file_in_tmp_folder(rst_path, server=server)
    h5_server_path = dpf.upload_file_in_tmp_folder(h5_path, server=server)
    material_server_path = dpf.upload_file_in_tmp_folder(material_path, server=server)








.. GENERATED FROM PYTHON SOURCE LINES 39-49

.. code-block:: default


    model = dpf.Model(rst_server_path)
    rst_data_source = dpf.DataSources(rst_server_path)

    eng_data_source = dpf.DataSources()
    eng_data_source.add_file_path(material_server_path, "EngineeringData")

    composite_definitions_source = dpf.DataSources()
    composite_definitions_source.add_file_path(h5_server_path, "CompositeDefinitions")








.. GENERATED FROM PYTHON SOURCE LINES 50-51

Setup Mesh Provider

.. GENERATED FROM PYTHON SOURCE LINES 51-54

.. code-block:: default

    mesh_provider = dpf.Operator("MeshProvider")
    mesh_provider.inputs.data_sources(rst_data_source)








.. GENERATED FROM PYTHON SOURCE LINES 55-59

Setup Material Provider
The material support provider takes care of mapping the materials in the rst file to
the materials in the composite definitions.
The material support contains all the materials from the rst file.

.. GENERATED FROM PYTHON SOURCE LINES 59-63

.. code-block:: default

    material_support_provider = dpf.Operator("support_provider")
    material_support_provider.inputs.property("mat")
    material_support_provider.inputs.data_sources(rst_data_source)








.. GENERATED FROM PYTHON SOURCE LINES 64-66

Get Result Info
This is needed provides the unit system from the rst file

.. GENERATED FROM PYTHON SOURCE LINES 66-69

.. code-block:: default

    result_info_provider = dpf.Operator("ResultInfoProvider")
    result_info_provider.inputs.data_sources(rst_data_source)








.. GENERATED FROM PYTHON SOURCE LINES 70-74

Set up material provider
Combines the material support the engineering data xml file and the unit_system.
It's output can be used
to evaluate material properties

.. GENERATED FROM PYTHON SOURCE LINES 74-81

.. code-block:: default

    material_provider = dpf.Operator("eng_data::ans_mat_material_provider")
    material_provider.inputs.data_sources = eng_data_source
    material_provider.inputs.unit_system_or_result_info(result_info_provider.outputs.result_info)
    material_provider.inputs.abstract_field_support(
        material_support_provider.outputs.abstract_field_support
    )
    material_provider.inputs.Engineering_data_file(eng_data_source)







.. GENERATED FROM PYTHON SOURCE LINES 82-84

Set up the layup provider
Read the composite definition file and enriches the mesh with the composite layup information.

.. GENERATED FROM PYTHON SOURCE LINES 84-93

.. code-block:: default

    layup_provider = dpf.Operator("composite::layup_provider_operator")
    layup_provider.inputs.mesh(mesh_provider.outputs.mesh)
    layup_provider.inputs.data_sources(composite_definitions_source)
    layup_provider.inputs.abstract_field_support(
        material_support_provider.outputs.abstract_field_support
    )
    layup_provider.connect(3, result_info_provider.outputs.result_info)
    layup_provider.run()








.. GENERATED FROM PYTHON SOURCE LINES 94-98

Setup the result operators: strains and stresses
Rotate to global is False because the post-processing engine expects the results to be
in the element coordinate system ( material coordinate system)


.. GENERATED FROM PYTHON SOURCE LINES 98-106

.. code-block:: default

    strain_operator = dpf.Operator("EPEL")
    strain_operator.inputs.data_sources(rst_data_source)
    strain_operator.inputs.bool_rotate_to_global(False)

    stress_operator = dpf.Operator("S")
    stress_operator.inputs.data_sources(rst_data_source)
    stress_operator.inputs.bool_rotate_to_global(False)








.. GENERATED FROM PYTHON SOURCE LINES 107-110

Setup the failure evaluator. Combines the results and evaluates all the failure criteria.
The output contains the maximum failure criteria for each integration point.


.. GENERATED FROM PYTHON SOURCE LINES 110-119

.. code-block:: default

    failure_criteria_definition = get_failure_criteria_definition()

    failure_evaluator = dpf.Operator("composite::multiple_failure_criteria_operator")
    failure_evaluator.inputs.string(json.dumps(failure_criteria_definition))
    failure_evaluator.connect(23, material_provider.outputs.materials_container)
    failure_evaluator.connect(0, strain_operator.outputs.fields_container)
    failure_evaluator.connect(1, stress_operator.outputs.fields_container)
    failure_evaluator.inputs.mesh(mesh_provider.outputs.mesh)








.. GENERATED FROM PYTHON SOURCE LINES 120-123

Uses the output of the multiple_failure_criteria_operator
to compute the min and max failure criteria for each element


.. GENERATED FROM PYTHON SOURCE LINES 123-130

.. code-block:: default

    minmax_per_element = dpf.Operator("composite::minmax_per_element_operator")
    minmax_per_element.inputs.fields_container(failure_evaluator.outputs.fields_container)
    minmax_per_element.connect(7, mesh_provider.outputs.mesh)
    minmax_per_element.connect(21, material_support_provider.outputs.abstract_field_support)

    output = minmax_per_element.outputs.field_max()








.. GENERATED FROM PYTHON SOURCE LINES 131-133

Plot the max and the minimum value for each value


.. GENERATED FROM PYTHON SOURCE LINES 133-135

.. code-block:: default

    value_index = 1
    model.metadata.meshed_region.plot(output[value_index])



.. image-sg:: /examples/gallery_examples/images/sphx_glr_basic_example_001.png
   :alt: basic example
   :srcset: /examples/gallery_examples/images/sphx_glr_basic_example_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.235 seconds)


.. _sphx_glr_download_examples_gallery_examples_basic_example.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: basic_example.py <basic_example.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: basic_example.ipynb <basic_example.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
