
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/gallery_examples/basic_example.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_gallery_examples_basic_example.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_gallery_examples_basic_example.py:


.. _basic_example:

Basic example of setting up a composite failure workflow
----------------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 8-12

.. code-block:: default


    import os
    import pathlib








.. GENERATED FROM PYTHON SOURCE LINES 13-14

Load ansys libraries

.. GENERATED FROM PYTHON SOURCE LINES 14-58

.. code-block:: default

    import ansys.dpf.core as dpf

    from ansys.dpf.composites.failure_criteria import (
        CombinedFailureCriterion,
        CoreFailureCriterion,
        CuntzeCriterion,
        HashinCriterion,
        HoffmanCriterion,
        MaxStrainCriterion,
        MaxStressCriterion,
        TsaiHillCriterion,
        TsaiWuCriterion,
        VonMisesCriterion,
    )
    from ansys.dpf.composites.load_plugin import load_composites_plugin


    def get_combined_failure_criterion() -> CombinedFailureCriterion:
        max_strain = MaxStrainCriterion()
        max_stress = MaxStressCriterion()
        tsai_hill = TsaiHillCriterion()
        tsai_wu = TsaiWuCriterion()
        hoffman = HoffmanCriterion()
        hashin = HashinCriterion()
        cuntze = CuntzeCriterion()
        core_failure = CoreFailureCriterion()
        von_mises_strain_only = VonMisesCriterion(vme=True, vms=False)

        return CombinedFailureCriterion(
            name="My Failure Criteria",
            failure_criteria=[
                max_strain,
                max_stress,
                tsai_hill,
                tsai_wu,
                hoffman,
                hashin,
                cuntze,
                core_failure,
                von_mises_strain_only,
            ],
        )









.. GENERATED FROM PYTHON SOURCE LINES 59-60

Load dpf plugin

.. GENERATED FROM PYTHON SOURCE LINES 60-63

.. code-block:: default

    server = dpf.server.connect_to_server("127.0.0.1", port=21002)
    load_composites_plugin()








.. GENERATED FROM PYTHON SOURCE LINES 64-65

Specify input files and upload them to the server

.. GENERATED FROM PYTHON SOURCE LINES 65-75

.. code-block:: default


    # Todo make files available for users
    TEST_DATA_ROOT_DIR = pathlib.Path(os.environ["REPO_ROOT"]) / "tests" / "data" / "shell"
    rst_path = os.path.join(TEST_DATA_ROOT_DIR, "shell.rst")
    h5_path = os.path.join(TEST_DATA_ROOT_DIR, "ACPCompositeDefinitions.h5")
    material_path = os.path.join(TEST_DATA_ROOT_DIR, "material.engd")
    rst_server_path = dpf.upload_file_in_tmp_folder(rst_path, server=server)
    h5_server_path = dpf.upload_file_in_tmp_folder(h5_path, server=server)
    material_server_path = dpf.upload_file_in_tmp_folder(material_path, server=server)








.. GENERATED FROM PYTHON SOURCE LINES 76-86

.. code-block:: default


    model = dpf.Model(rst_server_path)
    rst_data_source = dpf.DataSources(rst_server_path)

    eng_data_source = dpf.DataSources()
    eng_data_source.add_file_path(material_server_path, "EngineeringData")

    composite_definitions_source = dpf.DataSources()
    composite_definitions_source.add_file_path(h5_server_path, "CompositeDefinitions")








.. GENERATED FROM PYTHON SOURCE LINES 87-88

Setup Mesh Provider

.. GENERATED FROM PYTHON SOURCE LINES 88-90

.. code-block:: default

    mesh_provider = model.metadata.mesh_provider








.. GENERATED FROM PYTHON SOURCE LINES 91-95

Setup Material Provider
The material support provider takes care of mapping the materials in the rst file to
the materials in the composite definitions.
The material support contains all the materials from the rst file.

.. GENERATED FROM PYTHON SOURCE LINES 95-99

.. code-block:: default

    material_support_provider = dpf.Operator("support_provider")
    material_support_provider.inputs.property("mat")
    material_support_provider.inputs.data_sources(rst_data_source)








.. GENERATED FROM PYTHON SOURCE LINES 100-102

Get Result Info
This is needed provides the unit system from the rst file

.. GENERATED FROM PYTHON SOURCE LINES 102-105

.. code-block:: default

    result_info_provider = dpf.Operator("ResultInfoProvider")
    result_info_provider.inputs.data_sources(rst_data_source)








.. GENERATED FROM PYTHON SOURCE LINES 106-110

Set up material provider
Combines the material support the engineering data xml file and the unit_system.
It's output can be used
to evaluate material properties

.. GENERATED FROM PYTHON SOURCE LINES 110-117

.. code-block:: default

    material_provider = dpf.Operator("eng_data::ans_mat_material_provider")
    material_provider.inputs.data_sources = eng_data_source
    material_provider.inputs.unit_system_or_result_info(result_info_provider.outputs.result_info)
    material_provider.inputs.abstract_field_support(
        material_support_provider.outputs.abstract_field_support
    )
    material_provider.inputs.Engineering_data_file(eng_data_source)







.. GENERATED FROM PYTHON SOURCE LINES 118-120

Set up the layup provider
Read the composite definition file and enriches the mesh with the composite layup information.

.. GENERATED FROM PYTHON SOURCE LINES 120-129

.. code-block:: default

    layup_provider = dpf.Operator("composite::layup_provider_operator")
    layup_provider.inputs.mesh(mesh_provider.outputs.mesh)
    layup_provider.inputs.data_sources(composite_definitions_source)
    layup_provider.inputs.abstract_field_support(
        material_support_provider.outputs.abstract_field_support
    )
    layup_provider.inputs.unit_system_or_result_info(result_info_provider.outputs.result_info)
    layup_provider.run()








.. GENERATED FROM PYTHON SOURCE LINES 130-134

Setup the result operators: strains and stresses
Rotate to global is False because the post-processing engine expects the results to be
in the element coordinate system ( material coordinate system)


.. GENERATED FROM PYTHON SOURCE LINES 134-142

.. code-block:: default

    strain_operator = dpf.Operator("EPEL")
    strain_operator.inputs.data_sources(rst_data_source)
    strain_operator.inputs.bool_rotate_to_global(False)

    stress_operator = dpf.Operator("S")
    stress_operator.inputs.data_sources(rst_data_source)
    stress_operator.inputs.bool_rotate_to_global(False)








.. GENERATED FROM PYTHON SOURCE LINES 143-146

Setup the failure evaluator. Combines the results and evaluates all the failure criteria.
The output contains the maximum failure criteria for each integration point.


.. GENERATED FROM PYTHON SOURCE LINES 146-155

.. code-block:: default

    failure_criteria_definition = get_combined_failure_criterion()

    failure_evaluator = dpf.Operator("composite::multiple_failure_criteria_operator")
    failure_evaluator.inputs.configuration(failure_criteria_definition.to_json())
    failure_evaluator.inputs.materials_container(material_provider.outputs)
    failure_evaluator.inputs.strains(strain_operator.outputs.fields_container)
    failure_evaluator.inputs.stresses(stress_operator.outputs.fields_container)
    failure_evaluator.inputs.mesh(mesh_provider.outputs.mesh)








.. GENERATED FROM PYTHON SOURCE LINES 156-159

Uses the output of the multiple_failure_criteria_operator
to compute the min and max failure criteria for each element


.. GENERATED FROM PYTHON SOURCE LINES 159-168

.. code-block:: default

    minmax_per_element = dpf.Operator("composite::minmax_per_element_operator")
    minmax_per_element.inputs.fields_container(failure_evaluator.outputs.fields_container)
    minmax_per_element.inputs.mesh(mesh_provider.outputs.mesh)
    minmax_per_element.inputs.abstract_field_support(
        material_support_provider.outputs.abstract_field_support
    )

    output = minmax_per_element.outputs.field_max()








.. GENERATED FROM PYTHON SOURCE LINES 169-171

Plot the max and the minimum value for each value


.. GENERATED FROM PYTHON SOURCE LINES 171-173

.. code-block:: default

    value_index = 1
    model.metadata.meshed_region.plot(output[value_index])



.. image-sg:: /examples/gallery_examples/images/sphx_glr_basic_example_001.png
   :alt: basic example
   :srcset: /examples/gallery_examples/images/sphx_glr_basic_example_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  5.245 seconds)


.. _sphx_glr_download_examples_gallery_examples_basic_example.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: basic_example.py <basic_example.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: basic_example.ipynb <basic_example.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
