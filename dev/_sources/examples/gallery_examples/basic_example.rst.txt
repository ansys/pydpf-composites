
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/gallery_examples/basic_example.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_gallery_examples_basic_example.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_gallery_examples_basic_example.py:


.. _basic_example:

Basic example of setting up a composite failure workflow.
----------------------------------------------------------

This example shows how to connect the different dpf operators that are needed to
evaluate composite failure criteria. For simple use cases it is preferable
to use the composite failure operator
(:ref:`sphx_glr_examples_gallery_examples_failure_operator_example.py`)
or the composite sampling point operator
(:ref:`sphx_glr_examples_gallery_examples_sampling_point_operator_example.py`).
The :ref:`sphx_glr_examples_gallery_examples_filter_composite_data_example.py` example shows how
helper functions can be used to obtain composite result data.

.. GENERATED FROM PYTHON SOURCE LINES 18-19

Load ansys libraries

.. GENERATED FROM PYTHON SOURCE LINES 19-67

.. code-block:: default

    import ansys.dpf.core as dpf

    from ansys.dpf.composites.connect_to_or_start_server import connect_to_or_start_server
    from ansys.dpf.composites.example_helper.example_helper import get_continuous_fiber_example_files
    from ansys.dpf.composites.failure_criteria import (
        CombinedFailureCriterion,
        CoreFailureCriterion,
        CuntzeCriterion,
        HashinCriterion,
        HoffmanCriterion,
        MaxStrainCriterion,
        MaxStressCriterion,
        TsaiHillCriterion,
        TsaiWuCriterion,
        VonMisesCriterion,
    )


    def get_combined_failure_criterion() -> CombinedFailureCriterion:
        max_strain = MaxStrainCriterion()
        max_stress = MaxStressCriterion()
        tsai_hill = TsaiHillCriterion()
        tsai_wu = TsaiWuCriterion()
        hoffman = HoffmanCriterion()
        hashin = HashinCriterion()
        cuntze = CuntzeCriterion()
        core_failure = CoreFailureCriterion()
        von_mises_strain_only = VonMisesCriterion(vme=True, vms=False)

        return CombinedFailureCriterion(
            name="My Failure Criteria",
            failure_criteria=[
                max_strain,
                max_stress,
                tsai_hill,
                tsai_wu,
                hoffman,
                hashin,
                cuntze,
                core_failure,
                von_mises_strain_only,
            ],
        )


    server_context = connect_to_or_start_server()
    composite_files_on_server = get_continuous_fiber_example_files(server_context, "shell")








.. GENERATED FROM PYTHON SOURCE LINES 68-80

.. code-block:: default


    model = dpf.Model(composite_files_on_server.rst)
    rst_data_source = dpf.DataSources(composite_files_on_server.rst)

    eng_data_source = dpf.DataSources()
    eng_data_source.add_file_path(composite_files_on_server.engineering_data, "EngineeringData")

    composite_definitions_source = dpf.DataSources()
    composite_definitions_source.add_file_path(
        composite_files_on_server.composite["shell"].definition, "CompositeDefinitions"
    )








.. GENERATED FROM PYTHON SOURCE LINES 81-82

Setup Mesh Provider

.. GENERATED FROM PYTHON SOURCE LINES 82-84

.. code-block:: default

    mesh_provider = model.metadata.mesh_provider








.. GENERATED FROM PYTHON SOURCE LINES 85-89

Setup Material Provider
The material support provider takes care of mapping the materials in the rst file to
the materials in the composite definitions.
The material support contains all the materials from the rst file.

.. GENERATED FROM PYTHON SOURCE LINES 89-93

.. code-block:: default

    material_support_provider = dpf.Operator("support_provider")
    material_support_provider.inputs.property("mat")
    material_support_provider.inputs.data_sources(rst_data_source)








.. GENERATED FROM PYTHON SOURCE LINES 94-96

Get Result Info
This is needed provides the unit system from the rst file

.. GENERATED FROM PYTHON SOURCE LINES 96-99

.. code-block:: default

    result_info_provider = dpf.Operator("ResultInfoProvider")
    result_info_provider.inputs.data_sources(rst_data_source)








.. GENERATED FROM PYTHON SOURCE LINES 100-104

Set up material provider
Combines the material support the engineering data xml file and the unit_system.
It's output can be used
to evaluate material properties

.. GENERATED FROM PYTHON SOURCE LINES 104-111

.. code-block:: default

    material_provider = dpf.Operator("eng_data::ans_mat_material_provider")
    material_provider.inputs.data_sources = eng_data_source
    material_provider.inputs.unit_system_or_result_info(result_info_provider.outputs.result_info)
    material_provider.inputs.abstract_field_support(
        material_support_provider.outputs.abstract_field_support
    )
    material_provider.inputs.Engineering_data_file(eng_data_source)







.. GENERATED FROM PYTHON SOURCE LINES 112-114

Set up the layup provider
Read the composite definition file and enriches the mesh with the composite layup information.

.. GENERATED FROM PYTHON SOURCE LINES 114-123

.. code-block:: default

    layup_provider = dpf.Operator("composite::layup_provider_operator")
    layup_provider.inputs.mesh(mesh_provider.outputs.mesh)
    layup_provider.inputs.data_sources(composite_definitions_source)
    layup_provider.inputs.abstract_field_support(
        material_support_provider.outputs.abstract_field_support
    )
    layup_provider.inputs.unit_system_or_result_info(result_info_provider.outputs.result_info)
    layup_provider.run()








.. GENERATED FROM PYTHON SOURCE LINES 124-128

Setup the result operators: strains and stresses
Rotate to global is False because the post-processing engine expects the results to be
in the element coordinate system ( material coordinate system)


.. GENERATED FROM PYTHON SOURCE LINES 128-136

.. code-block:: default

    strain_operator = dpf.Operator("EPEL")
    strain_operator.inputs.data_sources(rst_data_source)
    strain_operator.inputs.bool_rotate_to_global(False)

    stress_operator = dpf.Operator("S")
    stress_operator.inputs.data_sources(rst_data_source)
    stress_operator.inputs.bool_rotate_to_global(False)








.. GENERATED FROM PYTHON SOURCE LINES 137-140

Setup the failure evaluator. Combines the results and evaluates all the failure criteria.
The output contains the maximum failure criteria for each integration point.


.. GENERATED FROM PYTHON SOURCE LINES 140-149

.. code-block:: default

    failure_criteria_definition = get_combined_failure_criterion()

    failure_evaluator = dpf.Operator("composite::multiple_failure_criteria_operator")
    failure_evaluator.inputs.configuration(failure_criteria_definition.to_json())
    failure_evaluator.inputs.materials_container(material_provider.outputs)
    failure_evaluator.inputs.strains(strain_operator.outputs.fields_container)
    failure_evaluator.inputs.stresses(stress_operator.outputs.fields_container)
    failure_evaluator.inputs.mesh(mesh_provider.outputs.mesh)








.. GENERATED FROM PYTHON SOURCE LINES 150-153

Uses the output of the multiple_failure_criteria_operator
to compute the min and max failure criteria for each element


.. GENERATED FROM PYTHON SOURCE LINES 153-162

.. code-block:: default

    minmax_per_element = dpf.Operator("composite::minmax_per_element_operator")
    minmax_per_element.inputs.fields_container(failure_evaluator.outputs.fields_container)
    minmax_per_element.inputs.mesh(mesh_provider.outputs.mesh)
    minmax_per_element.inputs.abstract_field_support(
        material_support_provider.outputs.abstract_field_support
    )

    output = minmax_per_element.outputs.field_max()








.. GENERATED FROM PYTHON SOURCE LINES 163-165

Plot the max and the minimum value for each value


.. GENERATED FROM PYTHON SOURCE LINES 165-167

.. code-block:: default

    value_index = 1
    model.metadata.meshed_region.plot(output[value_index])



.. image-sg:: /examples/gallery_examples/images/sphx_glr_basic_example_001.png
   :alt: basic example
   :srcset: /examples/gallery_examples/images/sphx_glr_basic_example_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.766 seconds)


.. _sphx_glr_download_examples_gallery_examples_basic_example.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: basic_example.py <basic_example.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: basic_example.ipynb <basic_example.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
