
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/gallery_examples/filter_composite_data_example.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_gallery_examples_filter_composite_data_example.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_gallery_examples_filter_composite_data_example.py:


.. _filter_composite_data:

Filter result data by different criteria
----------------------------------------------------------

Filter data by layer, spot and node as well as material or analysis_ply id.
Refer to :ref:`select_indices` to learn more about how layered result data is organized.

.. GENERATED FROM PYTHON SOURCE LINES 13-14

Import dependencies

.. GENERATED FROM PYTHON SOURCE LINES 14-34

.. code-block:: default

    import ansys.dpf.core as dpf
    import numpy as np

    from ansys.dpf.composites import (
        AnalysisPlyInfoProvider,
        get_selected_indices,
        get_selected_indices_by_analysis_ply,
        get_selected_indices_by_dpf_material_ids,
    )
    from ansys.dpf.composites.composite_model import CompositeModel
    from ansys.dpf.composites.enums import Spot, Sym3x3TensorComponent
    from ansys.dpf.composites.example_helper.example_helper import (
        connect_to_or_start_server,
        get_continuous_fiber_example_files,
    )
    from ansys.dpf.composites.layup_info import (
        get_all_analysis_ply_names,
        get_dpf_material_id_by_analyis_ply_map,
    )








.. GENERATED FROM PYTHON SOURCE LINES 35-36

Start server and load example files

.. GENERATED FROM PYTHON SOURCE LINES 36-40

.. code-block:: default


    server_context = connect_to_or_start_server()
    composite_files_on_server = get_continuous_fiber_example_files(server_context, "shell")








.. GENERATED FROM PYTHON SOURCE LINES 41-42

Setup composite model

.. GENERATED FROM PYTHON SOURCE LINES 42-44

.. code-block:: default

    composite_model = CompositeModel(composite_files_on_server, server_context.server)








.. GENERATED FROM PYTHON SOURCE LINES 45-46

Get example stress field

.. GENERATED FROM PYTHON SOURCE LINES 46-51

.. code-block:: default

    stress_operator = dpf.Operator("S")
    stress_operator.inputs.data_sources(composite_model.data_sources.rst)
    stress_operator.inputs.bool_rotate_to_global(False)
    stress_field = stress_operator.get_output(pin=0, output_type=dpf.types.fields_container)[0]








.. GENERATED FROM PYTHON SOURCE LINES 52-53

Get element infos for all the elements and show the first one as an example

.. GENERATED FROM PYTHON SOURCE LINES 53-58

.. code-block:: default

    element_ids = stress_field.scoping.ids
    element_infos = [composite_model.get_element_info(element_id) for element_id in element_ids]

    element_infos[0]





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    ElementInfo(id=1, n_layers=6, n_corner_nodes=4, n_spots=3, is_layered=True, element_type=181, dpf_material_ids=array([3, 2, 2, 1, 2, 3]), is_shell=True, number_of_nodes_per_spot_plane=4)



.. GENERATED FROM PYTHON SOURCE LINES 59-60

Plot stress values in material direction for the top layer, first node and "top" spot

.. GENERATED FROM PYTHON SOURCE LINES 60-77

.. code-block:: default

    component = Sym3x3TensorComponent.tensor11
    result_field = dpf.field.Field(location=dpf.locations.elemental, nature=dpf.natures.scalar)
    with result_field.as_local_field() as local_result_field:
        element_ids = stress_field.scoping.ids
        for element_id in element_ids:
            stress_data = stress_field.get_entity_data_by_id(element_id)
            element_info = composite_model.get_element_info(element_id)
            assert element_info is not None
            selected_indices = get_selected_indices(
                element_info, layers=[element_info.n_layers - 1], nodes=[0], spots=[Spot.TOP]
            )

            value = stress_data[selected_indices][:, component.value]
            local_result_field.append(value, element_id)

    composite_model.mesh.plot(result_field)




.. image-sg:: /examples/gallery_examples/images/sphx_glr_filter_composite_data_example_001.png
   :alt: filter composite data example
   :srcset: /examples/gallery_examples/images/sphx_glr_filter_composite_data_example_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 78-79

List all the available analysis plies

.. GENERATED FROM PYTHON SOURCE LINES 79-82

.. code-block:: default

    all_ply_names = get_all_analysis_ply_names(composite_model.mesh)
    all_ply_names





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    ['P1L1__ud', 'P1L1__ud.2', 'P1L1__woven_45', 'P1L1__ud_patch ns1', 'P1L1__core', 'P1L1__woven_45.2']



.. GENERATED FROM PYTHON SOURCE LINES 83-85

Loop all elements that contain a given ply and plot the maximum stress value
in material direction in that ply

.. GENERATED FROM PYTHON SOURCE LINES 85-108

.. code-block:: default

    component = Sym3x3TensorComponent.tensor11

    analysis_ply_info_provider = AnalysisPlyInfoProvider(
        mesh=composite_model.mesh, name="P1L1__ud_patch ns1"
    )
    ply_result_field = dpf.field.Field(location=dpf.locations.elemental, nature=dpf.natures.scalar)
    with ply_result_field.as_local_field() as local_result_field:
        element_ids = analysis_ply_info_provider.property_field.scoping.ids

        for element_id in element_ids:
            stress_data = stress_field.get_entity_data_by_id(element_id)
            element_info = composite_model.get_element_info(element_id)
            assert element_info is not None
            selected_indices = get_selected_indices_by_analysis_ply(
                analysis_ply_info_provider, element_info
            )

            value = np.max(stress_data[selected_indices][:, component.value])
            local_result_field.append([value], element_id)


    composite_model.mesh.plot(ply_result_field)




.. image-sg:: /examples/gallery_examples/images/sphx_glr_filter_composite_data_example_002.png
   :alt: filter composite data example
   :srcset: /examples/gallery_examples/images/sphx_glr_filter_composite_data_example_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 109-114

Loop all elements and get maximum stress in material direction
for all plies that have the material with dpf_material_id.
Note: It is currently not possible to get a dpf_material_id for a
given material name. It is only possible
to get the dpf_material_id from an analysis ply

.. GENERATED FROM PYTHON SOURCE LINES 114-136

.. code-block:: default

    material_map = get_dpf_material_id_by_analyis_ply_map(
        composite_model.mesh, data_source_or_streams_provider=composite_model.data_sources.rst
    )
    ud_material_id = material_map["P1L1__ud_patch ns1"]
    component = Sym3x3TensorComponent.tensor11

    material_result_field = dpf.field.Field(location=dpf.locations.elemental, nature=dpf.natures.scalar)
    with material_result_field.as_local_field() as local_result_field:
        element_ids = analysis_ply_info_provider.property_field.scoping.ids

        for element_id in element_ids:
            stress_data = stress_field.get_entity_data_by_id(element_id)
            element_info = composite_model.get_element_info(element_id)
            assert element_info is not None

            selected_indices = get_selected_indices_by_dpf_material_ids(element_info, [ud_material_id])

            value = np.max(stress_data[selected_indices][:, component.value])
            local_result_field.append([value], element_id)


    composite_model.mesh.plot(material_result_field)



.. image-sg:: /examples/gallery_examples/images/sphx_glr_filter_composite_data_example_003.png
   :alt: filter composite data example
   :srcset: /examples/gallery_examples/images/sphx_glr_filter_composite_data_example_003.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.294 seconds)


.. _sphx_glr_download_examples_gallery_examples_filter_composite_data_example.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: filter_composite_data_example.py <filter_composite_data_example.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: filter_composite_data_example.ipynb <filter_composite_data_example.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
