
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/gallery_examples/dpf_composite_failure_workflow.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_gallery_examples_dpf_composite_failure_workflow.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_gallery_examples_dpf_composite_failure_workflow.py:


.. _basic_example:

DPF composite failure workflow
------------------------------

Use of native DPF Python interface to configure and run composite failure evaluator.

This example shows how to connect the different DPF operators that are needed to
evaluate composite failure criteria. For simple use cases it is preferable
to use the composite failure operator
(:ref:`sphx_glr_examples_gallery_examples_1_failure_operator_example.py`)
or the composite sampling point operator
(:ref:`sphx_glr_examples_gallery_examples_2_sampling_point_example.py`).
The :ref:`sphx_glr_examples_gallery_examples_6_filter_composite_data_example.py` example shows how
helper functions can be used to obtain composite result data.

.. GENERATED FROM PYTHON SOURCE LINES 20-25

Script
~~~~~~

Load Ansys libraries


.. GENERATED FROM PYTHON SOURCE LINES 25-42

.. code-block:: default

    import ansys.dpf.core as dpf

    from ansys.dpf.composites.example_helper import get_continuous_fiber_example_files
    from ansys.dpf.composites.failure_criteria import (
        CombinedFailureCriterion,
        CoreFailureCriterion,
        CuntzeCriterion,
        HashinCriterion,
        HoffmanCriterion,
        MaxStrainCriterion,
        MaxStressCriterion,
        TsaiHillCriterion,
        TsaiWuCriterion,
        VonMisesCriterion,
    )
    from ansys.dpf.composites.server_helpers import connect_to_or_start_server








.. GENERATED FROM PYTHON SOURCE LINES 43-44

Configure the combined failure criterion

.. GENERATED FROM PYTHON SOURCE LINES 44-60

.. code-block:: default

    combined_fc = CombinedFailureCriterion(
        name="My Failure Criteria",
        failure_criteria=[
            MaxStrainCriterion(),
            MaxStressCriterion(),
            TsaiHillCriterion(),
            TsaiWuCriterion(),
            HoffmanCriterion(),
            HashinCriterion(),
            CuntzeCriterion(),
            CoreFailureCriterion(),
            VonMisesCriterion(vme=True, vms=False),
        ],
    )









.. GENERATED FROM PYTHON SOURCE LINES 61-62

Start server and prepare files

.. GENERATED FROM PYTHON SOURCE LINES 62-65

.. code-block:: default

    server = connect_to_or_start_server()
    composite_files_on_server = get_continuous_fiber_example_files(server, "shell")








.. GENERATED FROM PYTHON SOURCE LINES 66-67

Initialize DPF model and data sources

.. GENERATED FROM PYTHON SOURCE LINES 67-78

.. code-block:: default

    model = dpf.Model(composite_files_on_server.rst)
    rst_data_source = dpf.DataSources(composite_files_on_server.rst)

    eng_data_source = dpf.DataSources()
    eng_data_source.add_file_path(composite_files_on_server.engineering_data, "EngineeringData")

    composite_definitions_source = dpf.DataSources()
    composite_definitions_source.add_file_path(
        composite_files_on_server.composite["shell"].definition, "CompositeDefinitions"
    )








.. GENERATED FROM PYTHON SOURCE LINES 79-80

Set up Mesh Provider

.. GENERATED FROM PYTHON SOURCE LINES 80-82

.. code-block:: default

    mesh_provider = model.metadata.mesh_provider








.. GENERATED FROM PYTHON SOURCE LINES 83-87

Set up Material Provider
The material support provider takes care of mapping the materials in the rst file to
the materials in the composite definitions.
The material support contains all the materials from the rst file.

.. GENERATED FROM PYTHON SOURCE LINES 87-91

.. code-block:: default

    material_support_provider = dpf.Operator("support_provider")
    material_support_provider.inputs.property("mat")
    material_support_provider.inputs.data_sources(rst_data_source)








.. GENERATED FROM PYTHON SOURCE LINES 92-94

Get Result Info which
provides the unit system from the rst file

.. GENERATED FROM PYTHON SOURCE LINES 94-97

.. code-block:: default

    result_info_provider = dpf.Operator("ResultInfoProvider")
    result_info_provider.inputs.data_sources(rst_data_source)








.. GENERATED FROM PYTHON SOURCE LINES 98-102

Set up material provider
Combines the material support the engineering data XML file and the ``unit_system``.
It's output can be used
to evaluate material properties

.. GENERATED FROM PYTHON SOURCE LINES 102-109

.. code-block:: default

    material_provider = dpf.Operator("eng_data::ans_mat_material_provider")
    material_provider.inputs.data_sources = eng_data_source
    material_provider.inputs.unit_system_or_result_info(result_info_provider.outputs.result_info)
    material_provider.inputs.abstract_field_support(
        material_support_provider.outputs.abstract_field_support
    )
    material_provider.inputs.Engineering_data_file(eng_data_source)







.. GENERATED FROM PYTHON SOURCE LINES 110-112

Set up the layup provider
Read the composite definition file and enriches the mesh with the composite layup information.

.. GENERATED FROM PYTHON SOURCE LINES 112-121

.. code-block:: default

    layup_provider = dpf.Operator("composite::layup_provider_operator")
    layup_provider.inputs.mesh(mesh_provider.outputs.mesh)
    layup_provider.inputs.data_sources(composite_definitions_source)
    layup_provider.inputs.abstract_field_support(
        material_support_provider.outputs.abstract_field_support
    )
    layup_provider.inputs.unit_system_or_result_info(result_info_provider.outputs.result_info)
    layup_provider.run()








.. GENERATED FROM PYTHON SOURCE LINES 122-126

Set up the result operators: strains and stresses
Rotate to global is False because the post-processing engine expects the results to be
in the element coordinate system ( material coordinate system)


.. GENERATED FROM PYTHON SOURCE LINES 126-134

.. code-block:: default

    strain_operator = dpf.operators.result.elastic_strain()
    strain_operator.inputs.data_sources(rst_data_source)
    strain_operator.inputs.bool_rotate_to_global(False)

    stress_operator = dpf.operators.result.stress()
    stress_operator.inputs.data_sources(rst_data_source)
    stress_operator.inputs.bool_rotate_to_global(False)








.. GENERATED FROM PYTHON SOURCE LINES 135-138

Set up the failure evaluator. Combines the results and evaluates all the failure criteria.
The output contains the maximum failure criteria for each integration point.


.. GENERATED FROM PYTHON SOURCE LINES 138-146

.. code-block:: default


    failure_evaluator = dpf.Operator("composite::multiple_failure_criteria_operator")
    failure_evaluator.inputs.configuration(combined_fc.to_json())
    failure_evaluator.inputs.materials_container(material_provider.outputs)
    failure_evaluator.inputs.strains(strain_operator.outputs.fields_container)
    failure_evaluator.inputs.stresses(stress_operator.outputs.fields_container)
    failure_evaluator.inputs.mesh(mesh_provider.outputs.mesh)








.. GENERATED FROM PYTHON SOURCE LINES 147-150

Uses the output of the ``multiple_failure_criteria_operator``
to compute the min and max failure criteria for each element


.. GENERATED FROM PYTHON SOURCE LINES 150-159

.. code-block:: default

    minmax_per_element = dpf.Operator("composite::minmax_per_element_operator")
    minmax_per_element.inputs.fields_container(failure_evaluator.outputs.fields_container)
    minmax_per_element.inputs.mesh(mesh_provider.outputs.mesh)
    minmax_per_element.inputs.abstract_field_support(
        material_support_provider.outputs.abstract_field_support
    )

    output = minmax_per_element.outputs.field_max()








.. GENERATED FROM PYTHON SOURCE LINES 160-162

Plot the max and the minimum value for each value


.. GENERATED FROM PYTHON SOURCE LINES 162-164

.. code-block:: default

    value_index = 1
    model.metadata.meshed_region.plot(output[value_index])



.. image-sg:: /examples/gallery_examples/images/sphx_glr_dpf_composite_failure_workflow_001.png
   :alt: dpf composite failure workflow
   :srcset: /examples/gallery_examples/images/sphx_glr_dpf_composite_failure_workflow_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.066 seconds)


.. _sphx_glr_download_examples_gallery_examples_dpf_composite_failure_workflow.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dpf_composite_failure_workflow.py <dpf_composite_failure_workflow.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dpf_composite_failure_workflow.ipynb <dpf_composite_failure_workflow.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
